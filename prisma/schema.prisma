// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  rating      Int
  wins        Int
  losses      Int
  matchesWhite     Match[]  @relation(name: "WhiteMatches")
  matchesBlack     Match[]  @relation(name: "BlackMatches")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Match{
  id Int @id @default(autoincrement())
  
  whitePlayerId String
  blackPlayerId String
  white   User @relation("WhiteMatches", fields: [whitePlayerId], references: [id], onDelete: Cascade)
  black   User @relation("BlackMatches", fields: [blackPlayerId], references: [id], onDelete: Cascade)
  
  status   MatchStatus  @default(IN_PROGRESS)
  
  winnerId String? //draw
  moves   Json  //[{from:"e2",to:"e4",san:"e4"}, ...]

  result String? //"1-0", "0-1", "1/2-1/2"
  
  createdAt DateTime
  updatedAt DateTime
}

enum MatchStatus {
  IN_PROGRESS
  FINISHED
  ABORTED
}